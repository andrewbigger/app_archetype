#!/usr/bin/env ruby

$LOAD_PATH.unshift(__dir__ + '/../lib')

require 'rubygems'
require 'optparse'
require 'highline'

require 'app_archetype'
require 'app_archetype/cli'

require 'byebug'

USAGE = "App Archetype code project template renderer

Usage:\tarchetype <command> <variables> <opts>
Options:
  \t--trace\t\t trace mode on
  -o, --overwrite\t [optional] option to overwrite any existing files
  -h, --help\t\t print usage

Commands:
  render\t\t renders project template
".freeze

@trace = false
@overwrite = false
@dest = Dir.pwd

OptionParser.new do |opts|
  opts.banner = USAGE
  opts.on('--trace') { @trace = true }
  opts.on('-o', '--overwrite BOOL')   { @overwrite = true }
  opts.on('-d', '--destination PATH') { |d| @dest = d }

  opts.on_tail('-h', '--help') do
    AppArchetype::CLI.print_message_and_exit(USAGE)
  end
end.parse!

begin
  cmd = ARGV.shift
  AppArchetype::CLI::Commands.public_send(
    cmd.to_sym,
    @dest,
    ARGV,
    @overwrite
  )
rescue StandardError => e
  AppArchetype::CLI.print_message(e)
  AppArchetype::CLI.print_message(e.backtrace) if @trace
  AppArchetype::CLI.print_message("\n")
  AppArchetype::CLI.print_message_and_exit(USAGE)
end

exit(0)
